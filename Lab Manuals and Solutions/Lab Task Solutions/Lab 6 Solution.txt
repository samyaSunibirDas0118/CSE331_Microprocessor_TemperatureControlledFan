; LAB 6 TASK 1
--------------

INCLUDE "EMU8086.INC"

.MODEL SMALL
.STACK 100H
.DATA 
      MSG DB "ENTER 8 NUMBERS : ", 0 ;NULL
.CODE
      MOV AX, @DATA
      MOV DS, AX
      
      LEA SI, MSG
      ;LOADS ADDRESS OF MSG IN SI
      
      ;PROMPTS THE USER
      CALL PRINT_STRING
      PRINTN
      
      MOV BX, 8 ;AS WE HAVE TO TAKE 8 INPUTS
      MOV DX, 0 
      
TAKE_INPUT:
      CALL SCAN_NUM ;INPUT IS IN CX
      PRINTN     
      ADD DX, CX     ;ADDS DX CONTENT WITH INPUT & STORES IN DX 
      DEC BX         ;DECREMENTS BX 
      JNZ TAKE_INPUT ;IF DEC BX RESULT IS NOT ZERO THEN GOTO TAKE_INPUT
      
      SHR DX, 3      ;WHICH IS BASICALLY DEVIDE BY 8
      MOV AX, DX     
                    
      PRINTN              
      PRINT "AVERAGE = "
      CALL PRINT_NUM ;PRINTS THE RESULT,THAT IS IN AX
       
EXIT:
      MOV AH, 4CH
      INT 21H 

;DEFINEING PROCEDURES 
DEFINE_PRINT_STRING  
DEFINE_SCAN_NUM
DEFINE_PRINT_NUM
DEFINE_PRINT_NUM_UNS
END

; LAB 6 TASK 2
--------------

INCLUDE "EMU8086.INC"

.MODEL SMALL
.STACK 100H
.DATA 
      ARRAY DW 8 DUP(?)  ; ARRAY OF SIZE 8
      MAX DW ?
      MIN DW ?
      MSG DB "ENTER 8 NUMBERS : ", 0 ;NULL      
.CODE
      MOV AX, @DATA
      MOV DS, AX
      
      LEA SI, MSG
      ;LOADS ADDRESS OF MSG IN SI
      
      ;PROMPTS THE USER
      CALL PRINT_STRING
      PRINTN
      
      MOV BX, 8 ;AS WE HAVE TO TAKE 8 INPUTS
      
TAKE_INPUT:
      DEC BX  ;DECREMENTS BX
      CMP BX, 0 
      ;CHECK BX, IF BX < 0, THEN NO MORE INPUTS TO BE TAKEN
      JL PRINT_MIN_MAX
      
      CALL SCAN_NUM ;INPUT IS IN CX
      MOV DX, CX    ;INPUT IN DX
      PRINTN
      
      ;IF IT IS FIRST INPUT, THEN SET MIN AND MAX
      CMP BX, 7
      JZ SET_MIN_MAX
      JMP COMPARE_MAX ;OTHERWISE GOTO COMPARE_MAX
      
  SET_MIN_MAX:
      MOV MAX, DX     ;MAX = 1ST INPUT
      MOV MIN, DX     ;MIN = 1ST INPUT
      JMP TAKE_INPUT  ;GOTO TAKE_INPUT        
  
  COMPARE_MAX: 
      CMP DX, MAX     
      JG SET_MAX      ;IF INPUT > MAX, THEN GOTO SET_MAX
      
  COMPARE_MIN:
      CMP DX, MIN
      JL SET_MIN      ;IF INPUT < MAX, THEN GOTO SET_MAX              
  
  ;OTHERWISE GOTO TAKE_INPUT
      JMP TAKE_INPUT        
      
  SET_MAX:
      MOV MAX, DX     ;MAX = INPUT NOW
      JMP TAKE_INPUT  
      
  SET_MIN:
      MOV MIN, DX     ;MIN = INPUT NOW
      JMP TAKE_INPUT

PRINT_MIN_MAX:
      PRINTN
      MOV AX, MIN
      PRINT "MINIMUM = "
      CALL PRINT_NUM  ;PRINTING MIN
      
      PRINTN
      MOV AX, MAX
      PRINT "MAXIMUM = "
      CALL PRINT_NUM  ;PRINTING MAX
          
EXIT:
      MOV AH, 4CH
      INT 21H 

;DEFINEING PROCEDURES 
DEFINE_PRINT_STRING  
DEFINE_SCAN_NUM
DEFINE_PRINT_NUM
DEFINE_PRINT_NUM_UNS
END